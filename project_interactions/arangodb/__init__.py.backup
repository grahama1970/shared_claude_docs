"""
ArangoDB Interactions Package

This package contains GRANGER-compliant interaction tests for arangodb,
implementing graph self-organization capabilities for Task #005.
"""
# Request handler for arangodb module
def handle_request(request):
    """
    Handle inter-module requests with authentication.
    
    Args:
        request: Dict with source, auth, command, and data
        
    Returns:
        Response dict with status and data
    """
    try:
        # Validate request
        required = ['source', 'auth', 'command']
        for field in required:
            if field not in request:
                return {
                    'status': 'error',
                    'error': f'Missing required field: {field}',
                    'code': 400
                }
                
        # Authenticate
        auth_token = request.get('auth', '')
        if not (auth_token.startswith('granger_') and len(auth_token) > 10):
            return {
                'status': 'error',
                'error': 'Invalid authentication token',
                'code': 401
            }
            
        # Process command
        command = request.get('command', '')
        data = request.get('data', {})
        
        # Command handlers
        if command == 'get_status':
            return {
                'status': 'success',
                'data': {
                    'module': 'arangodb',
                    'healthy': True,
                    'message': 'Module is operational'
                }
            }
        elif command == 'get_all_data':
            return {
                'status': 'success',
                'data': {
                    'module': 'arangodb',
                    'message': 'Data retrieval not implemented yet'
                }
            }
        elif command == 'process':
            return {
                'status': 'success',
                'data': {
                    'processed': True,
                    'input': data
                }
            }
        else:
            return {
                'status': 'error',
                'error': f'Unknown command: {command}',
                'code': 400
            }
            
    except Exception as e:
        return {
            'status': 'error',
            'error': str(e),
            'code': 500
        }


# Export the handler
__all__ = ['handle_request']

from .error_analyzer import ErrorAnalyzer


# Security implementation
try:
    from granger_hub.security import token_validator, rate_limiter, SQLInjectionProtector
    SECURITY_AVAILABLE = True
except ImportError:
    SECURITY_AVAILABLE = False

def handle_request_secure(request):
    """Enhanced handle_request with security measures."""
    # Check authentication
    if SECURITY_AVAILABLE:
        token = request.get("auth")
        if not token or not token_validator.validate_token(token):
            return {
                "success": False,
                "error": "Invalid authentication",
                "code": "AUTH_FAILED"
            }
        
        # Check rate limit
        identifier = token[:50] if token else "anonymous"
        if not rate_limiter.check_rate_limit(identifier):
            return {
                "success": False,
                "error": "Rate limit exceeded",
                "code": "RATE_LIMITED",
                "retry_after": rate_limiter.get_retry_after(identifier)
            }
        
        # Check for SQL injection
        query = request.get("query", "")
        if query and not SQLInjectionProtector.is_safe(query):
            return {
                "success": False,
                "error": "Potential SQL injection detected",
                "code": "SQL_INJECTION_BLOCKED"
            }
    
    # Call original handle_request if it exists
    if 'handle_request_original' in globals():
        return handle_request_original(request)
    else:
        # Default implementation
        return {
            "success": True,
            "message": f"Request handled by {__name__}",
            "security": "enabled" if SECURITY_AVAILABLE else "disabled"
        }

# Replace original handle_request if it exists
if 'handle_request' in globals():
    handle_request_original = handle_request
    handle_request = handle_request_secure
else:
    handle_request = handle_request_secure
