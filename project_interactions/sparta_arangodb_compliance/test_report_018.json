{"created": 1748982265.6490135, "duration": 0.13675665855407715, "exitcode": 1, "root": "/home/graham/workspace/shared_claude_docs", "environment": {}, "summary": {"failed": 1, "passed": 3, "total": 4, "collected": 4}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "project_interactions/sparta_arangodb_compliance/tests/test_compliance_mapping.py", "type": "Module"}]}, {"nodeid": "project_interactions/sparta_arangodb_compliance/tests/test_compliance_mapping.py::TestComplianceMapping", "outcome": "passed", "result": [{"nodeid": "project_interactions/sparta_arangodb_compliance/tests/test_compliance_mapping.py::TestComplianceMapping::test_map_nist_to_graph", "type": "Function", "lineno": 67}, {"nodeid": "project_interactions/sparta_arangodb_compliance/tests/test_compliance_mapping.py::TestComplianceMapping::test_cross_reference_frameworks", "type": "Function", "lineno": 173}, {"nodeid": "project_interactions/sparta_arangodb_compliance/tests/test_compliance_mapping.py::TestComplianceMapping::test_generate_compliance_insights", "type": "Function", "lineno": 264}, {"nodeid": "project_interactions/sparta_arangodb_compliance/tests/test_compliance_mapping.py::TestComplianceMapping::test_honeypot_compliance_mapping", "type": "Function", "lineno": 426}]}, {"nodeid": "project_interactions/sparta_arangodb_compliance/tests/test_compliance_mapping.py", "outcome": "passed", "result": [{"nodeid": "project_interactions/sparta_arangodb_compliance/tests/test_compliance_mapping.py::TestComplianceMapping", "type": "Class"}]}], "tests": [{"nodeid": "project_interactions/sparta_arangodb_compliance/tests/test_compliance_mapping.py::TestComplianceMapping::test_map_nist_to_graph", "lineno": 67, "outcome": "failed", "keywords": ["test_map_nist_to_graph", "TestComplianceMapping", "test_compliance_mapping.py", "tests", "sparta_arangodb_compliance", "project_interactions", "shared_claude_docs", ""], "setup": {"duration": 0.003073690924793482, "outcome": "passed"}, "call": {"duration": 0.0018635978922247887, "outcome": "failed", "crash": {"path": "/home/graham/workspace/shared_claude_docs/project_interactions/sparta_arangodb_compliance/tests/test_compliance_mapping.py", "lineno": 153, "message": "AssertionError: assert 9 == 7\n +  where 9 = len([{'_from': 'controls/AC-1', '_to': 'controls/AC-2', 'relationship': 'control_dependency', 'type': 'related_to'}, {'_fr...}, {'_from': 'controls/SI-4', '_to': 'controls/SI-7', 'relationship': 'control_dependency', 'type': 'related_to'}, ...])"}, "traceback": [{"path": "tests/test_compliance_mapping.py", "lineno": 153, "message": "AssertionError"}], "longrepr": "self = <project_interactions.sparta_arangodb_compliance.tests.test_compliance_mapping.TestComplianceMapping object at 0x7eaf5b08f6b0>\nsample_nist_controls = [{'control_id': 'AC-1', 'description': 'The organization develops, documents, and disseminates access control policy',...nitors the information system to detect attacks', 'family': 'System and Information Integrity', 'priority': 'P2', ...}]\ntmp_path = PosixPath('/tmp/pytest-of-graham/pytest-105/test_map_nist_to_graph0')\n\n    def test_map_nist_to_graph(self, sample_nist_controls, tmp_path):\n        \"\"\"Test mapping NIST controls to ArangoDB graph structure.\"\"\"\n        start_time = time.time()\n    \n        # Simulate SPARTA processing\n        sparta_output = {\n            \"source\": \"NIST SP 800-53\",\n            \"version\": \"Rev 5\",\n            \"controls\": sample_nist_controls,\n            \"extraction_date\": \"2025-01-06\",\n            \"total_controls\": len(sample_nist_controls)\n        }\n    \n        # Transform to ArangoDB graph format\n        vertices = []\n        edges = []\n    \n        # Create control vertices\n        for control in sample_nist_controls:\n            vertex = {\n                \"_key\": control[\"control_id\"],\n                \"_id\": f\"controls/{control['control_id']}\",\n                \"type\": \"nist_control\",\n                \"title\": control[\"title\"],\n                \"description\": control[\"description\"],\n                \"family\": control[\"family\"],\n                \"priority\": control[\"priority\"],\n                \"framework\": \"NIST SP 800-53\"\n            }\n            vertices.append(vertex)\n    \n            # Create edges for related controls\n            for related in control.get(\"related_controls\", []):\n                edge = {\n                    \"_from\": f\"controls/{control['control_id']}\",\n                    \"_to\": f\"controls/{related}\",\n                    \"type\": \"related_to\",\n                    \"relationship\": \"control_dependency\"\n                }\n                edges.append(edge)\n    \n        # Create family vertices\n        families = list(set(c[\"family\"] for c in sample_nist_controls))\n        for family in families:\n            family_key = family.replace(\" \", \"_\").lower()\n            vertex = {\n                \"_key\": family_key,\n                \"_id\": f\"families/{family_key}\",\n                \"type\": \"control_family\",\n                \"name\": family,\n                \"framework\": \"NIST SP 800-53\"\n            }\n            vertices.append(vertex)\n    \n            # Link controls to families\n            family_controls = [c for c in sample_nist_controls if c[\"family\"] == family]\n            for control in family_controls:\n                edge = {\n                    \"_from\": f\"controls/{control['control_id']}\",\n                    \"_to\": f\"families/{family_key}\",\n                    \"type\": \"belongs_to\",\n                    \"relationship\": \"family_membership\"\n                }\n                edges.append(edge)\n    \n        # Simulate ArangoDB storage\n        graph_data = {\n            \"vertices\": vertices,\n            \"edges\": edges,\n            \"metadata\": {\n                \"source\": sparta_output[\"source\"],\n                \"version\": sparta_output[\"version\"],\n                \"import_date\": sparta_output[\"extraction_date\"],\n                \"vertex_count\": len(vertices),\n                \"edge_count\": len(edges)\n            }\n        }\n    \n        # Save to file (simulating ArangoDB export)\n        output_file = tmp_path / \"nist_graph.json\"\n        with open(output_file, 'w') as f:\n            json.dump(graph_data, f, indent=2)\n    \n        # Assertions\n        assert len(vertices) == 6  # 3 controls + 3 families\n>       assert len(edges) == 7  # 4 related_to + 3 belongs_to\nE       AssertionError: assert 9 == 7\nE        +  where 9 = len([{'_from': 'controls/AC-1', '_to': 'controls/AC-2', 'relationship': 'control_dependency', 'type': 'related_to'}, {'_fr...}, {'_from': 'controls/SI-4', '_to': 'controls/SI-7', 'relationship': 'control_dependency', 'type': 'related_to'}, ...])\n\ntests/test_compliance_mapping.py:153: AssertionError"}, "teardown": {"duration": 0.0003060358576476574, "outcome": "passed"}}, {"nodeid": "project_interactions/sparta_arangodb_compliance/tests/test_compliance_mapping.py::TestComplianceMapping::test_cross_reference_frameworks", "lineno": 173, "outcome": "passed", "keywords": ["test_cross_reference_frameworks", "TestComplianceMapping", "test_compliance_mapping.py", "tests", "sparta_arangodb_compliance", "project_interactions", "shared_claude_docs", ""], "setup": {"duration": 0.0006029321812093258, "outcome": "passed"}, "call": {"duration": 0.0009049279615283012, "outcome": "passed", "stdout": "\u2713 Successfully cross-referenced frameworks\n  NIST coverage: 100%\n  MITRE coverage: 100%\n  Total mappings: 6\n  Duration: 0.001s\n"}, "teardown": {"duration": 0.0001962636597454548, "outcome": "passed"}}, {"nodeid": "project_interactions/sparta_arangodb_compliance/tests/test_compliance_mapping.py::TestComplianceMapping::test_generate_compliance_insights", "lineno": 264, "outcome": "passed", "keywords": ["test_generate_compliance_insights", "TestComplianceMapping", "test_compliance_mapping.py", "tests", "sparta_arangodb_compliance", "project_interactions", "shared_claude_docs", ""], "setup": {"duration": 0.0005300408229231834, "outcome": "passed"}, "call": {"duration": 0.001484269741922617, "outcome": "passed", "stdout": "\u2713 Successfully generated compliance insights\n  Overall compliance: 55%\n  Recommendations: 3\n  Critical gaps: 1\n  Duration: 0.001s\n"}, "teardown": {"duration": 0.00017816293984651566, "outcome": "passed"}}, {"nodeid": "project_interactions/sparta_arangodb_compliance/tests/test_compliance_mapping.py::TestComplianceMapping::test_honeypot_compliance_mapping", "lineno": 426, "outcome": "passed", "keywords": ["test_honeypot_compliance_mapping", "TestComplianceMapping", "test_compliance_mapping.py", "tests", "sparta_arangodb_compliance", "project_interactions", "shared_claude_docs", ""], "setup": {"duration": 0.0001677628606557846, "outcome": "passed"}, "call": {"duration": 0.00021607382223010063, "outcome": "passed", "stdout": "\u2713 Honeypot test passed: Invalid controls detected correctly\n"}, "teardown": {"duration": 0.00020607374608516693, "outcome": "passed"}}]}