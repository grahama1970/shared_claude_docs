"""
Level 0 Search Interactions for ArXiv MCP Server

Tests core search functionality of the ArXiv MCP Server.

External Dependencies:
- typing: Built-in type annotations
- arxiv: ArXiv API client (pip install arxiv)

Example Usage:
>>> interaction = BasicSearchInteraction()
>>> result = interaction.run(query="quantum computing", limit=5)
>>> print(f"Success: {result.success}")
"""

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

from interaction_framework import Level0Interaction


class BasicSearchInteraction(Level0Interaction):
    """Test basic ArXiv search functionality"""
    
    def __init__(self):
        super().__init__(
            "Basic ArXiv Search",
            "Search for papers using a simple query"
        )
        
    def initialize_module(self):
        # Import and initialize the ArXiv search functionality
        try:
            import arxiv
            return arxiv.Client()
        except ImportError:
            # Fallback for testing without actual module
            return {"mock": True, "name": "arxiv_client"}
        
    def execute(self, **kwargs):
        query = kwargs.get("query", "quantum computing")
        limit = kwargs.get("limit", 10)
        
        if hasattr(self.module, "mock"):
            # Mock response for testing
            return [
                {
                    "id": f"2024.{i:05d}",
                    "title": f"Paper {i}: {query}",
                    "authors": [f"Author {i}"],
                    "abstract": f"Abstract about {query}",
                    "pdf_url": f"https://arxiv.org/pdf/2024.{i:05d}.pdf"
                }
                for i in range(min(limit, 3))
            ]
            
        # Real implementation
        search = arxiv.Search(
            query=query,
            max_results=limit,
            sort_by=arxiv.SortCriterion.SubmittedDate
        )
        
        results = []
        for paper in self.module.results(search):
            results.append({
                "id": paper.entry_id.split("/")[-1],
                "title": paper.title,
                "authors": [str(author) for author in paper.authors],
                "abstract": paper.summary,
                "pdf_url": paper.pdf_url,
                "published": paper.published.isoformat() if paper.published else None
            })
            
        return results
        
    def validate_output(self, output):
        if not isinstance(output, list):
            return False
            
        if len(output) == 0:
            return False
            
        # Check each result has required fields
        required_fields = ["id", "title", "authors", "abstract"]
        for paper in output:
            if not all(field in paper for field in required_fields):
                return False
                
        return True


class AdvancedSearchInteraction(Level0Interaction):
    """Test advanced search with filters and sorting"""
    
    def __init__(self):
        super().__init__(
            "Advanced ArXiv Search",
            "Search with category filters and custom sorting"
        )
        
    def initialize_module(self):
        try:
            import arxiv
            return arxiv.Client()
        except ImportError:
            return {"mock": True, "name": "arxiv_client"}
        
    def execute(self, **kwargs):
        query = kwargs.get("query", "neural networks")
        categories = kwargs.get("categories", ["cs.LG", "cs.AI"])
        limit = kwargs.get("limit", 5)
        sort_by = kwargs.get("sort_by", "relevance")
        
        if hasattr(self.module, "mock"):
            return [{
                "id": f"2024.{i:05d}",
                "title": f"{query} in {categories[0]}",
                "categories": categories,
                "relevance_score": 1.0 - (i * 0.1)
            } for i in range(min(limit, 3))]
            
        # Build category query
        cat_query = " OR ".join([f"cat:{cat}" for cat in categories])
        full_query = f"({query}) AND ({cat_query})"
        
        # Map sort options
        sort_map = {
            "relevance": arxiv.SortCriterion.Relevance,
            "date": arxiv.SortCriterion.SubmittedDate,
            "last_updated": arxiv.SortCriterion.LastUpdatedDate
        }
        
        search = arxiv.Search(
            query=full_query,
            max_results=limit,
            sort_by=sort_map.get(sort_by, arxiv.SortCriterion.Relevance)
        )
        
        results = []
        for paper in self.module.results(search):
            results.append({
                "id": paper.entry_id.split("/")[-1],
                "title": paper.title,
                "categories": paper.categories,
                "primary_category": paper.primary_category
            })
            
        return results
        
    def validate_output(self, output):
        return isinstance(output, list) and len(output) > 0


class SemanticSearchInteraction(Level0Interaction):
    """Test semantic/natural language search"""
    
    def __init__(self):
        super().__init__(
            "Semantic ArXiv Search",
            "Search using natural language queries"
        )
        
    def initialize_module(self):
        # This would use the MCP server's semantic search
        return {"semantic_search": True}
        
    def execute(self, **kwargs):
        nl_query = kwargs.get("query", 
            "Find recent papers about using transformers for computer vision")
        
        # Mock semantic search results
        return [
            {
                "id": "2024.00001",
                "title": "Vision Transformers: A Survey",
                "relevance": 0.95,
                "explanation": "Highly relevant survey on transformers in CV"
            },
            {
                "id": "2024.00002", 
                "title": "ViT: Vision Transformer Architecture",
                "relevance": 0.92,
                "explanation": "Core paper on Vision Transformers"
            }
        ]
        
    def validate_output(self, output):
        if not isinstance(output, list) or len(output) == 0:
            return False
            
        # Check semantic search includes relevance scores
        for result in output:
            if "relevance" not in result or result["relevance"] < 0 or result["relevance"] > 1:
                return False
                
        return True


class AuthorSearchInteraction(Level0Interaction):
    """Test searching by author name"""
    
    def __init__(self):
        super().__init__(
            "Author Search",
            "Find all papers by a specific author"
        )
        
    def initialize_module(self):
        try:
            import arxiv
            return arxiv.Client()
        except ImportError:
            return {"mock": True}
        
    def execute(self, **kwargs):
        author = kwargs.get("author", "Yann LeCun")
        limit = kwargs.get("limit", 10)
        
        if hasattr(self.module, "mock"):
            return [{
                "id": f"2024.{i:05d}",
                "title": f"Paper by {author}",
                "authors": [author, f"Coauthor {i}"],
                "year": 2024 - i
            } for i in range(min(limit, 5))]
            
        search = arxiv.Search(
            query=f"au:{author}",
            max_results=limit,
            sort_by=arxiv.SortCriterion.SubmittedDate
        )
        
        results = []
        for paper in self.module.results(search):
            results.append({
                "id": paper.entry_id.split("/")[-1],
                "title": paper.title,
                "authors": [str(a) for a in paper.authors],
                "year": paper.published.year if paper.published else None
            })
            
        return results
        
    def validate_output(self, output):
        if not isinstance(output, list):
            return False
            
        # Should find at least one paper
        return len(output) > 0


if __name__ == "__main__":
    from interaction_framework import InteractionRunner
    
    # Run all search interactions
    runner = InteractionRunner("ArXiv Search Module")
    
    interactions = [
        BasicSearchInteraction(),
        AdvancedSearchInteraction(),
        SemanticSearchInteraction(),
        AuthorSearchInteraction()
    ]
    
    # Run with test parameters
    test_params = {
        "query": "machine learning",
        "limit": 5,
        "author": "Yoshua Bengio"
    }
    
    for interaction in interactions:
        runner.run_interaction(interaction, **test_params)
        
    report = runner.generate_report()
    print(f"\nFinal success rate: {report['summary']['success_rate']:.1f}%")