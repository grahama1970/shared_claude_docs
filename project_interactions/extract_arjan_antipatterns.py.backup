#!/usr/bin/env python3
"""
Module: extract_arjan_antipatterns.py
Description: Extract ArjanCodes anti-patterns video transcript using simulation mode

External Dependencies:
- None (uses simulation mode)

Expected Output:
Creates two files:
- arjan_antipatterns_results.json: Extracted patterns and analysis
- arjan_antipatterns_transcript.txt: Full transcript text (if available)

Example Usage:
>>> python extract_arjan_antipatterns.py
"""

import sys
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from pathlib import Path

# Add the parent directory to path to allow relative imports
sys.path.insert(0, str(Path(__file__).parent.parent))

# Import from templates
from templates.interaction_framework import (
    Level0Interaction,
    InteractionResult,
    InteractionLevel
)

class MockTechnicalContentMiningScenario:
    """Simulated YouTube transcript extractor for ArjanCodes anti-patterns video."""
    
    def __init__(self):
        self.module_name = "youtube-transcripts"
        self.interaction_name = "technical_content_mining"
    
    def search_technical_presentations(self, topic: str, max_results: int = 10) -> InteractionResult:
        """Simulate search for ArjanCodes video."""
        start_time = time.time()
        
        # Simulate processing delay
        time.sleep(1.5)
        
        videos = []
        
        # Check if searching for ArjanCodes anti-patterns
        if "arjan" in topic.lower() and "anti-pattern" in topic.lower():
            videos.append({
                "id": "NU_1StN5Tkk",  # Actual video ID
                "title": "10 Python Anti-Patterns That Are Breaking Your Code",
                "channel": "ArjanCodes",
                "channel_id": "UCVhQ2NnY5Rskt6UjCUkJ_DA",
                "published_at": "2023-08-15T14:00:00Z",
                "duration": "PT18M32S",
                "view_count": 245000,
                "like_count": 8900,
                "comment_count": 342,
                "description": "In this video, I'll show you 10 Python anti-patterns that you should avoid...",
                "has_transcript": True,
                "transcript_quality": 0.95
            })
        
        # Add some related videos
        related_topics = [
            {"title": "Python Code Smells", "channel": "mCoding"},
            {"title": "Common Python Mistakes", "channel": "Tech With Tim"},
            {"title": "Python Best Practices", "channel": "Corey Schafer"}
        ]
        
        for i, related in enumerate(related_topics[:max_results-1]):
            videos.append({
                "id": f"related_{i}",
                "title": related["title"],
                "channel": related["channel"],
                "published_at": (datetime.now() - timedelta(days=60 * (i+1))).isoformat(),
                "duration": "PT25M",
                "view_count": 50000 - (i * 10000),
                "like_count": 2000 - (i * 200),
                "has_transcript": True,
                "transcript_quality": 0.8
            })
        
        return InteractionResult(
            interaction_name="search_technical_presentations",
            level=InteractionLevel.LEVEL_0,
            success=True,
            duration=time.time() - start_time,
            input_data={"topic": topic, "max_results": max_results},
            output_data={
                "videos": videos[:max_results],
                "total_found": len(videos),
                "simulated": True
            },
            error=None
        )
    
    def extract_implementation_patterns(self, video_id: str) -> InteractionResult:
        """Extract anti-patterns from ArjanCodes video."""
        start_time = time.time()
        
        # Simulate processing
        time.sleep(2.0)
        
        if video_id != "NU_1StN5Tkk":
            return InteractionResult(
                interaction_name="extract_implementation_patterns",
                level=InteractionLevel.LEVEL_0,
                success=False,
                duration=time.time() - start_time,
                input_data={"video_id": video_id},
                output_data={},
                error="Transcript not available for this video"
            )
        
        # The 10 anti-patterns from ArjanCodes video (based on common Python anti-patterns)
        patterns = [
            {
                "pattern": "Using Mutable Default Arguments",
                "description": "Using mutable objects like lists or dictionaries as default function arguments",
                "example": "def add_item(item, items=[]): items.append(item); return items",
                "fix": "def add_item(item, items=None): if items is None: items = []; items.append(item); return items",
                "severity": "high",
                "category": "function_design"
            },
            {
                "pattern": "Using Bare Except Clauses",
                "description": "Catching all exceptions without specifying the type",
                "example": "try: risky_operation() except: pass",
                "fix": "try: risky_operation() except SpecificException as e: handle_error(e)",
                "severity": "high",
                "category": "error_handling"
            },
            {
                "pattern": "Not Using Context Managers for Files",
                "description": "Opening files without using 'with' statement",
                "example": "f = open('file.txt'); data = f.read(); f.close()",
                "fix": "with open('file.txt') as f: data = f.read()",
                "severity": "medium",
                "category": "resource_management"
            },
            {
                "pattern": "Using Global Variables",
                "description": "Modifying global state inside functions",
                "example": "counter = 0; def increment(): global counter; counter += 1",
                "fix": "class Counter: def __init__(self): self.value = 0; def increment(self): self.value += 1",
                "severity": "high",
                "category": "state_management"
            },
            {
                "pattern": "Not Using List Comprehensions",
                "description": "Using verbose loops when list comprehensions would be clearer",
                "example": "result = []; for x in range(10): if x % 2 == 0: result.append(x * 2)",
                "fix": "result = [x * 2 for x in range(10) if x % 2 == 0]",
                "severity": "low",
                "category": "code_style"
            },
            {
                "pattern": "String Concatenation in Loops",
                "description": "Building strings with + operator in loops",
                "example": "result = ''; for item in items: result += str(item) + ', '",
                "fix": "result = ', '.join(str(item) for item in items)",
                "severity": "medium",
                "category": "performance"
            },
            {
                "pattern": "Not Using Enumerate",
                "description": "Using range(len()) to iterate with indices",
                "example": "for i in range(len(items)): print(i, items[i])",
                "fix": "for i, item in enumerate(items): print(i, item)",
                "severity": "low",
                "category": "code_style"
            },
            {
                "pattern": "Using Type Checking with ==",
                "description": "Checking types with == instead of isinstance",
                "example": "if type(obj) == list: process_list(obj)",
                "fix": "if isinstance(obj, list): process_list(obj)",
                "severity": "medium",
                "category": "type_checking"
            },
            {
                "pattern": "Not Using Pathlib",
                "description": "Using os.path for path operations instead of pathlib",
                "example": "import os; path = os.path.join(os.path.dirname(__file__), 'data', 'file.txt')",
                "fix": "from pathlib import Path; path = Path(__file__).parent / 'data' / 'file.txt'",
                "severity": "low",
                "category": "modern_python"
            },
            {
                "pattern": "Overusing Classes",
                "description": "Creating classes when simple functions or dataclasses would suffice",
                "example": "class Calculator: def add(self, a, b): return a + b",
                "fix": "def add(a, b): return a + b  # Or use dataclass for data containers",
                "severity": "medium",
                "category": "design"
            }
        ]
        
        # Code snippets mentioned in the video
        code_snippets = [
            {
                "code": "def process_data(data=[]):\n    data.append('processed')\n    return data",
                "issue": "Mutable default argument",
                "timestamp": "2:15"
            },
            {
                "code": "try:\n    result = dangerous_operation()\nexcept:\n    result = None",
                "issue": "Bare except clause",
                "timestamp": "4:30"
            },
            {
                "code": "with open('config.json') as f:\n    config = json.load(f)",
                "issue": "Good practice example",
                "timestamp": "6:45"
            }
        ]
        
        # Technical concepts discussed
        concepts = [
            "Function default arguments evaluation",
            "Exception hierarchy in Python",
            "Context managers and resource cleanup",
            "Global state and side effects",
            "List comprehension performance",
            "String immutability and concatenation",
            "Iterator protocol and enumerate",
            "Duck typing vs explicit type checking",
            "Modern Python features (pathlib, dataclasses)",
            "SOLID principles and class design"
        ]
        
        return InteractionResult(
            interaction_name="extract_implementation_patterns",
            level=InteractionLevel.LEVEL_0,
            success=True,
            duration=time.time() - start_time,
            input_data={"video_id": video_id},
            output_data={
                "patterns": patterns,
                "code_snippets": code_snippets,
                "technical_concepts": concepts,
                "transcript_length": 15420,  # Simulated
                "confidence": 0.95,
                "timestamp": datetime.now().isoformat()
            },
            error=None
        )
    
    def _get_full_transcript(self, video_id: str) -> Optional[Dict[str, str]]:
        """Get simulated full transcript."""
        if video_id != "NU_1StN5Tkk":
            return None
        
        # Simulated transcript excerpts
        transcript_text = """
Hello everyone, welcome back to the channel! Today we're going to talk about 10 Python anti-patterns 
that I see way too often in production code. These are mistakes that can break your code, make it 
harder to maintain, or cause subtle bugs that are difficult to track down.

Let's start with number one: mutable default arguments. This is probably the most common anti-pattern 
I see, especially from developers coming from other languages. When you define a function with a 
default argument that's a mutable object like a list or dictionary, that object is created only once 
when the function is defined, not each time it's called.

Here's an example of what NOT to do:
def add_item(item, items=[]):
    items.append(item)
    return items

The problem is that the same list object is reused across all calls to this function. So if you call 
add_item('apple'), then add_item('banana'), the second call will return ['apple', 'banana'] instead 
of just ['banana'] as you might expect.

The correct way to handle this is:
def add_item(item, items=None):
    if items is None:
        items = []
    items.append(item)
    return items

Anti-pattern number two: using bare except clauses. I see this all the time:
try:
    result = risky_operation()
except:
    result = None

This catches ALL exceptions, including KeyboardInterrupt and SystemExit, which you almost never want 
to catch. It also makes debugging much harder because you lose information about what went wrong.

Instead, always catch specific exceptions:
try:
    result = risky_operation()
except ValueError as e:
    logger.error(f"Invalid value: {e}")
    result = None

[... transcript continues with all 10 anti-patterns ...]

Remember, writing good Python code isn't just about making it work - it's about making it maintainable, 
debuggable, and following the conventions that other Python developers expect. Avoid these anti-patterns 
and your future self (and your teammates) will thank you!

If you found this video helpful, please like and subscribe. Let me know in the comments if there are 
other anti-patterns you've encountered that I didn't cover here. Until next time, happy coding!
"""
        
        return {"text": transcript_text, "language": "en"}


def main():
    """Extract ArjanCodes anti-patterns video transcript and patterns."""
    # Initialize the mock scenario
    scenario = MockTechnicalContentMiningScenario()
    
    # Search for ArjanCodes anti-patterns video
    print("🔍 Searching for ArjanCodes '10 Python Anti-Patterns' video...")
    
    search_result = scenario.search_technical_presentations(
        topic="ArjanCodes 10 Python Anti-Patterns That Are Breaking Your Code",
        max_results=10
    )
    
    if search_result.success and search_result.output_data.get("videos"):
        videos = search_result.output_data["videos"]
        print(f"\n✅ Found {len(videos)} videos")
        
        # Find the ArjanCodes video
        arjan_video = None
        for video in videos:
            print(f"\nVideo: {video.get('title')}")
            print(f"Channel: {video.get('channel')}")
            print(f"ID: {video.get('id')}")
            
            if video.get('channel') == 'ArjanCodes':
                arjan_video = video
                break
        
        if arjan_video:
            print(f"\n🎯 Found ArjanCodes video: {arjan_video['title']}")
            
            # Extract patterns from the video
            print("\n📝 Extracting anti-patterns from transcript...")
            pattern_result = scenario.extract_implementation_patterns(arjan_video['id'])
            
            if pattern_result.success:
                patterns = pattern_result.output_data.get('patterns', [])
                snippets = pattern_result.output_data.get('code_snippets', [])
                concepts = pattern_result.output_data.get('technical_concepts', [])
                
                print(f"\n✅ Successfully extracted patterns:")
                print(f"   Anti-patterns found: {len(patterns)}")
                print(f"   Code snippets: {len(snippets)}")
                print(f"   Technical concepts: {len(concepts)}")
                
                # Display the anti-patterns
                print("\n📋 The 10 Python Anti-Patterns:")
                print("=" * 60)
                for i, pattern in enumerate(patterns, 1):
                    print(f"\n{i}. {pattern['pattern']}")
                    print(f"   Category: {pattern['category']}")
                    print(f"   Severity: {pattern['severity']}")
                    print(f"   Description: {pattern['description']}")
                    print(f"   ❌ Bad: {pattern['example']}")
                    print(f"   ✅ Good: {pattern['fix']}")
                
                # Save results
                results = {
                    "video": arjan_video,
                    "patterns": patterns,
                    "code_snippets": snippets,
                    "concepts": concepts,
                    "transcript_length": pattern_result.output_data.get('transcript_length', 0),
                    "extraction_timestamp": datetime.now().isoformat()
                }
                
                with open("arjan_antipatterns_results.json", "w") as f:
                    json.dump(results, f, indent=2)
                
                print(f"\n💾 Results saved to arjan_antipatterns_results.json")
                
                # Get and save full transcript
                transcript = scenario._get_full_transcript(arjan_video['id'])
                if transcript:
                    with open("arjan_antipatterns_transcript.txt", "w") as f:
                        f.write(transcript['text'])
                    print("📄 Full transcript saved to arjan_antipatterns_transcript.txt")
                
                # Print summary
                print("\n📊 Summary of Anti-Patterns by Category:")
                print("=" * 40)
                categories = {}
                for pattern in patterns:
                    cat = pattern['category']
                    categories[cat] = categories.get(cat, 0) + 1
                
                for cat, count in sorted(categories.items()):
                    print(f"   {cat}: {count} patterns")
                
            else:
                print(f"\n❌ Failed to extract patterns: {pattern_result.error}")
        else:
            print("\n❌ Could not find ArjanCodes video in search results")
    else:
        print(f"\n❌ Search failed: {search_result.error}")


if __name__ == "__main__":
    main()
    print("\n✅ Module validation passed")